{\rtf0\ansi{\fonttbl\f0\fswiss Helvetica;\f1\fmodern Courier;}
{\colortbl;\red255\green255\blue255;}
\paperw12900\paperh12980
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs48 \cf0 New System Directory Layout\
Mac OS X Server and Yellow Box for Windows\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 Copyright (c) 1998, Apple Computer, Inc.\
All rights reserved.\
\
\
OpenStep and Rhapsody DR1 had a number of directories whose path started with 
\f1 /Next
\f0 .  The system directory layout has been changed to eliminate references to Next and to be more consistent and uniform.  See the section 
\b New System Directory Layout
\b0  below.  Also refer to the on-line help information accessible in ProjectBuilder.\
\
This directory contains tools to help find references to the old directory layout and convert project files appropriately.\
\
Before you can build an old OpenStep or Rhapsody DR1 project on this system, the project must be converted to the new directory layout.  This involves the following steps:\
\
1)  Copy the old project to this system.\
\
2)  Find references to the old directory layout throughout your project.  See the section 
\b Finding Old Directory References In a Project Hierarchy
\b0  below.\
\
3)  Convert your project Makefiles and PB.project files to the new layout.  See the section 
\b Converting Project Files to the New Directory Layout 
\b0 below.\
\
4)  Eliminate any source code references to the new locations using the new Foundation directory API.  See the section 
\b Foundation's System Directory Access API's 
\b0 below
\b .
\b0 \
\
5)  Compile and test your program.\
\
\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs36 \cf0 New System Directory Layout\
\

\fs28 Mac OS X Server:\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 \
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b \cf0 \ul New Directory
\b0 \ulnone 	
\b \ul Old Directory
\b0 \ulnone \
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 /Network
\f0  -- (typical "sitewide" mount points)\

\f1 	/Administration	was /LocalAdmin\
	/Applications	was /LocalApps\
	/Developer	\
	/Documentation	was /LocalLibrary/Documentation\
	/Library	was /LocalLibrary\
	/Users\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 /Local
\f0  -- (Local hard disk storage)\

\f1 	/Administration\
	/Applications			\
	/Developer	was /LocalDeveloper\
	/Documentation\
	/Library\
	/Public	fully readable and writable by all users\
	/Users\
\pard\tx0\tx560\tx1260\tx4480\tx5040\tx5600\tx6160\ql\qnatural
\cf0 		/Administrator	was /root\
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 	\
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 /System
\f0  -- (Shipped with the system, read-only for most users)\

\f1 	/Administration	was /NextAdmin\
	/Applications	was /NextApps\
	/Demos	was /NextDeveloper/Demos\
	/Developer	was /NextDeveloper\
	/Documentation	was /NextLibrary/Documentation\
	/Installation	was /NextCD\
	/Library	was /NextLibrary\
\pard\tx0\tx560\tx1260\tx4480\tx5040\tx5600\tx6160\ql\qnatural
\cf0 	     /Printers	(hidden by default), was /usr/lib/NextPrinter\
	     /CoreServices	(hidden by default), was /usr/lib/NextStep\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs28 \cf0 Windows:\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 \
\pard\tx0\tx560\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 $(NEXT_ROOT)/Demos	was $(NEXT_ROOT)/NextDemos\
$(NEXT_ROOT)/Developer	was $(NEXT_ROOT)/NextDeveloper\
$(NEXT_ROOT)/Documentation 	was $(NEXT_ROOT)/NextLibrary/Documentation\
$(NEXT_ROOT)/Library	was $(NEXT_ROOT)/NextLibrary\
$(NEXT_ROOT)/Local/Developer	was $(NEXT_ROOT)/LocalDeveloper\
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx0\tx560\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 PDO Platforms:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 \
The new directory layout on PDO platforms is the same as on Windows platforms.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs36 \cf0 Finding Old Directory References In a Project Hierarchy
\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b \cf0 \
\pard\tx560\tx1120\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 SearchForOldDirs
\f0\b  
\b0 is a script to look for
\b  
\b0 hardcoded references to the old directory structure in your project.  To use it, do the following.\
\
On Mac OS X Server:\
\
1)  Open a Terminal window, by choosing the Terminal menu item from the Apple menu at the left of the menu bar.  Since long command strings are given in this document, you may find it convenient to copy those strings from this document and paste them into the Terminal window.\
\
2)  cd to the top-level directory of the project hierarchy you want to search.\
\
3)  Run the following command:\

\f1 \
  /System/Developer/Makefiles/Conversion/DirectoryLayout/SearchForOldDirs -v
\f0 \
\
or on Windows:\
\
1)  Open a Bourne Shell window, by invoking the Programs -> Apple YellowBox -> Bourne Shell (or Programs -> WebObjects -> Bourne Shell) menu item from the Windows Start menu.  The Bourne Shell runs sh.exe by default, so it understands forward slashes as separators in path names, and forward slashes are used in this document.  Since long command strings are given in this document, you may find it convenient to copy those strings from this document and paste them into the Bourne Shell.  To paste in the Bourne Shell, click in the icon at the left of the Bourne Shell window title bar, and select the Edit -> Paste menu item.\
\
2)  cd to the top-level directory of the project hierarchy you want to search.\
\
3)  Run the following command:\

\f1 \
  $NEXT_ROOT/Developer/Makefiles/Conversion/DirectoryLayout/SearchForOldDirs -v
\f0 \
\
\
With the "-v" argument, this script shows all the matching lines in all files in the project hierarchy that might refer to the old directory layout.  Note that you will get garbage for executables.  To show just the names of files whose contents may refer to old directory names, omit the "-v".\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs36 \cf0 Converting Project Makefiles to the New Directory Layout
\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 \
In OpenStep and Rhapsody DR1, every project and subproject had references to the old directory layout hard-coded in at least two files ± PB.project and Makefile (which ProjectBuilder generates from info in PB.project).  All of these files will need to be changed for a project to successfully build on later releases.\
\
This section describes:\
\
	± the conversion tool for changing your Makefiles and PB.project\
	± the process of using that conversion tool\
	± new variables defined in ProjectBuilder's global makefiles for referencing system directories\
	± changes to gnumake to define where to find the global makefiles\
\
\

\b ConvertMakefilesToNewDirs ± The Makefile Conversion Script\

\b0 \

\f1 ConvertMakefilesToNewDirs
\f0  is a script to automate the process of changing project files to remove hard-coded references to system directories and replace them with references to new variables now defined by ProjectBuilder's global makefiles.  This script can be found in:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 Mac OS X Server:  
\f1 /System/Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs
\f0 \
Windows:  $NEXT_ROOT/
\f1 Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
Usage:  
\f1 ConvertMakefilesToNewDirs [-n] [-r] [--help] file ...
\fs20 \

\f0\fs24 	
\f1 -r, --recursive
\f0 		Find and fix all makefiles and PB.project files, recursing through subdirectories.	
\f1 -n, --just-print
\f0 	Don't actually run any commands; just print them.\
	
\f1 --help
\f0 				Print usage message.\
\
The only files this script will change are Makefile, Makefile.preamble, Makefile.postamble, PB.project, and Info.table.  (Info.table is a file used in custom project type definitions.)  You can give it other file names as well, but they will be ignored.\
\
To change all Makefiles and PB.project files in a project and its subprojects, run the following:\
\
On Mac OS X Server, in a Terminal window, run:\
\
	cd <project top-level directory>\
	
\f1 /System/Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs -r
\f0 \
\
or on Windows, in a Bourne Shell window, run:\
\
	cd <project top-level directory>\
	
\f1 $NEXT_ROOT/Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs -r
\f0 \
\
\

\b Steps Involved in Converting a Project's Makefiles and PB.project\

\b0 \
To convert an old project to fix problems in Makefile, Makefile.preamble, Makefile.postamble, and PB.project in the top-level directory and all subprojects, do the following:\
\
1)  cd <project top-level directory>\
\
2)  First verify that a valid list of files will be converted, by running (use $NEXT_ROOT instead of /System in a Bourne Shell window on Windows):\
\
	
\f1 /System/Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs -n -r\

\f0 \
3)  To actually convert the Makefiles and PB.project files, remove the -n flag as follows:\
\
	
\f1 /System/Developer/Makefiles/Conversion/DirectoryLayout/ConvertMakefilesToNewDirs -r\

\f0 \
4)  Verify that the results are valid by examining the files.  The original version of any changed files will be retained as 
\f1\fs20 <file>~
\f0\fs24   (twiddle appended).  You can compare them in FileMerge as follows in each directory and subdirectory:\
\

\f1 		opendiff Makefile~ Makefile\
		opendiff Makefile.preamble~ Makefile.preamble\
		opendiff Makefile.postamble~ Makefile.postamble\
		opendiff PB.project~ PB.project\

\f0 \
5)  Open the project in ProjectBuilder to ensure that the PB.project file can be parsed properly.\
\
6)  Fix any other references the project makes to the old directory layout.  Use the new API in Foundation to find system directories, rather than hard-coding them.  See the section 
\b Foundation's System Directory Access API 
\b0 below.\
\
7)  Build the project and test it.\
\
\

\b Makefile Variables for Refering to the System Directories\

\b0 \
The global 
\f1 pb_makefiles
\f0  and 
\f1 project
\f0  makefiles now set the variables listed below for you to use in your Makefile.preamble and Makefile.postamble files as necessary.  The 
\f1 ConvertMakefilesToNewDirs
\f0  script finds references to old hard-coded paths, and changes them to appropriate references to these make variables.  In PB.project files (which are ASCII-encoded plists), the conversion script quotes these variable references appropriately so the PB.project files can still be parsed by ProjectBuilder and other tools.  \
\

\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx4140\tx4480\tx5040\tx5600\tx6160\tx6720\tx7920\ql\qnatural

\f0\b \cf0 \ul VARIABLE
\b0 \ulnone 					
\b \ul Mac OS X Server SETTING
\b0 \ulnone 	
\b \ul WINDOWS SETTING
\b0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx4140\tx4480\tx5040\tx5600\tx6160\tx6720\tx7920\ql\qnatural

\f1\fs20 \cf0 SYSTEM_APPS_DIR				/System/Applications		/Demos\
SYSTEM_ADMIN_APPS_DIR			/System/Administration	/Demos\
SYSTEM_DEMOS_DIR				/System/Demos			/Demos\
SYSTEM_DEVELOPER_DIR			/System/Developer		/Developer\
SYSTEM_DEVELOPER_APPS_DIR		/System/Developer/Applications	/Developer/Applications\
SYSTEM_LIBRARY_DIR				/System/Library			/Library\
SYSTEM_CORE_SERVICES_DIR		/System/Library/CoreServices	/Library/CoreServices\
SYSTEM_DOCUMENTATION_DIR		/System/Documentation		/Documentation\
SYSTEM_LIBRARY_EXECUTABLES_DIR	 no value				/Library/Executables\
SYSTEM_DEVELOPER_EXECUTABLES_DIR	 no value				/Developer/Executables\
LOCAL_DEVELOPER_DIR			/Local/Developer			/Local/Developer\
LOCAL_DEVELOPER_EXECUTABLES_DIR	 no value				/Local/Developer/Executables\
USER_APPS_DIR					$(HOME)/Applications		$(HOME)/Applications\
USER_LIBRARY_DIR				$(HOME)/Library			$(HOME)/Library\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\

\b Changes to gnumake to Find the Global Makefiles at Build Time\
\

\b0 ProjectBuilder generates and maintains the Makefile for each project, based on information in PB.project, unless it is a Legacy project.  ProjectBuilder currently generates a line of the following form into the PB.project file and the Makefile, saying where to find the global makefiles:\
\

\f1 	MAKEFILEDIR = $(NEXT_ROOT)/NextDeveloper/Makefiles/pb_makefiles\

\f0 \
With the new directory layout, ProjectBuilder's global Makefiles are at a different path on Windows than on Mac OS X Server.  So, it isn't possible to have each project's Makefile use a single path to reference the global makefiles.  To keep each project's Makefile simple, gnumake has been changed to resolve this issue.\
\
/bin/gnumake now internally defines a new default variable, MAKEFILEPATH.  This gets set as follows:\
\
Mac OS X Server:	
\f1 MAKEFILEPATH = /System/Developer/Makefiles
\f0 \
Windows:			
\f1 MAKEFILEPATH = $(NEXT_ROOT)/Developer/Makefiles
\f0 \
\
Both NEXT_ROOT and MAKEFILEPATH itself can be overridden with environment variables, command line arguments to make, or defines in makefiles.\
\
The 
\f1 ConvertMakefilesToNewDirs
\f0  script will automatically change the MAKEFILEDIR setting in your PB.project and Makefile.  For non-Legacy projects, you'll should get one of the following lines, depending on which set of global makefiles you use.\
\
	
\f1 MAKEFILEDIR = $(MAKEFILEPATH)/pb_makefiles
\f0 	(preferred)\
	
\f1 MAKEFILEDIR = $(MAKEFILEPATH)/project
\f0 		(old ± please migrate to pb_makefiles)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs36 \cf0 Foundation's System Directory Access API
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs24 \cf0 \
Once you have converted your PB.project files and your Makefiles, you may also need to convert any hard-coded directory path references in your code.  To get an ordered list of directories where certain type of items can be found or installed, call the following Foundation function declared in <Foundation/NSPathUtilities.h>:\
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 NSArray *
\b NSSearchPathForDirectoriesInDomains
\b0 (NSSearchPathDirectory 
\i directory
\i0 , \
                                             NSSearchPathDomainMask 
\i domainMask
\i0 , \
                                             BOOL 
\i expandTilde
\i0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
The 
\i directory
\i0  argument specifies what type of items to be looking for; values are one of the following:\
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx5600\tx6160\tx6720\li6160\fi-6160\ql\qnatural

\f1 \cf0     NSApplicationDirectory = 1,	// supported applications (Applications)\
    NSDemoApplicationDirectory,	// unsupported applications, demonstration versions (Demos)\
    NSDeveloperApplicationDirectory,	// developer applications (Developer/Applications)\
    NSAdminApplicationDirectory,	// system and network administration applications (Administration)\
    NSLibraryDirectory, 	// various user-visible documentation, support, and configuration files, resources (Library)\
    NSDeveloperDirectory,	// developer resources (Developer)\
    NSUserDirectory,	// user home directories (Users)\
    NSDocumentationDirectory,	// documentation (Documentation)\
    NSAllApplicationsDirectory = 100,	// all directories where applications can occur\
    NSAllLibrariesDirectory = 101	// all directories where resources can occur\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 The 
\i domain
\i0  argument specifies the domains to look in. To get back a search path that contains directories from different domains (but ordered from first to look in to last), simply OR together multiple domains; or use 
\i NSAllDomainsMask:
\i0 \
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx5600\tx6160\tx6720\li6160\fi-6160\ql\qnatural

\f1 \cf0     NSUserDomainMask = 1,	// user's home directory --- place to install user's personal items (~)\
    NSLocalDomainMask = 2,	// local to the current machine --- place to install items available to everyone on this machine (/Local)\
    NSNetworkDomainMask = 4, 	// publically available location in the local area network --- place to install items available on the network (/Network)\
    NSSystemDomainMask = 8,	// provided by Apple, unmodifiable (/System)\
    NSAllDomainsMask = 0x0ffff	// all domains: all of the above and future items\
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 The 
\i expandTilde
\i0  argument specifies whether the user's home directory should be denoted as "~" or expanded. \
\
NOTE:  $NEXT_ROOT is prepended to the return values where needed. This is interesting on Windows and PDO, where NEXT_ROOT is defined.\
\
NOTE: On some platforms, some combinations of arguments might return empty arrays. For instance, we currently do not deal with the "network" domain on Windows. Callers should always check to make sure there is at least one item in the array before accessing the item. Also note that it's sometimes possible to get multiple values even when you expected only one.  In that case the first one is the best one to use.\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx5600\tx6160\tx6720\li6160\fi-6160\ql\qnatural
\cf0 \
\
Examples:\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx5600\tx6160\tx6720\li6160\fi-6160\ql\qnatural

\f1 \cf0 \
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0   NSSearchPathForDirectoriesInDomains(\
		NSLibraryDirectory, NSAllDomainsMask, YES) \
gives:\
		(/Local/Users/user/Library,\
		 /Local/Library,\
		 /Network/Library,\
		 /System/Library)\
\
  NSSearchPathForDirectoriesInDomains(\
		NSApplicationDirectory, NSUserDomainsMask, NO)\
gives:\
		(~/Applications)\
\
  NSSearchPathForDirectoriesInDomains(\
		NSAllApplicationsDirectory,NSSystemDomainsMask, NO)\
gives:\
		(/System/Applications,\
		 /System/Administration,\
		 /System/Developer/Applications,\
		 /System/Demos)\
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
On Windows:\
\
\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0   NSSearchPathForDirectoriesInDomains(\
		NSLibraryDirectory, NSAllDomainsMask, YES) \
gives:\
		(D:/user/Library,\
		 C:/Apple/Local/Library,\
		 C:/Apple/Library)\
}
